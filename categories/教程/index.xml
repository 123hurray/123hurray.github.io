<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>教程 on RayXXZhang的博客</title>
    <link>http://rayxxzhang.com/categories/%E6%95%99%E7%A8%8B/</link>
    <description>Recent content in 教程 on RayXXZhang的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2015 Copyright RayXXZhang</copyright>
    <lastBuildDate>Thu, 29 Oct 2015 16:48:16 +0800</lastBuildDate>
    <atom:link href="http://rayxxzhang.com/categories/%E6%95%99%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>从Eclipse迁移到Android Studio</title>
      <link>http://rayxxzhang.com/2015/10/29/migrate_to_android_studio/</link>
      <pubDate>Thu, 29 Oct 2015 16:48:16 +0800</pubDate>
      
      <guid>http://rayxxzhang.com/2015/10/29/migrate_to_android_studio/</guid>
      <description>

&lt;p&gt;Android Studio发布正式版后，Google的重心转向AS，以后可能也会逐步停止对Eclipse的支持，而且目前开源项目有很多以及不支持Eclipse。因此决心将项目转到Android Studio进行开发。&lt;/p&gt;

&lt;h2 id=&#34;安装:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;Android Studio的安装需要联网并且下载Android SDK和gradle等等才能使用。
同时AS的使用需要配合相应位数的JDK，并且JDK的路径需要设置到JAVA_HOME环境变量。&lt;/p&gt;

&lt;p&gt;AS的安装包大约300-400MB，但安装好后加上SDK等等其他依赖，占用空间可能达到8GB以上。
因此如果能获取到AS安装后的文件也可以直接复制使用。复制时需要复制Android Studio安装文件夹，SDK文件夹，以及个人目录下的.gradle和.androidstudiox.y文件夹，其中x.y为AS的版本号，其中存放着AS的配置。&lt;/p&gt;

&lt;h2 id=&#34;导入:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;导入&lt;/h2&gt;

&lt;p&gt;Eclipse项目迁移到AS的第一步是更新Eclipse的AJDT插件，然后在文件菜单选择导出，将Eclipse工程导出成AS工程。导出后会在目录下生成build.gradle文件，
然后在AS选择导入非AS工程的选项即可导入，第一次使用由于需要分析构建整个项目，所以速度会比较慢。&lt;/p&gt;

&lt;h2 id=&#34;注意事项:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;注意事项&lt;/h2&gt;

&lt;h3 id=&#34;so库的支持:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;so库的支持&lt;/h3&gt;

&lt;p&gt;如果是纯java的项目，导入后就基本能编译运行了，如果项目中还依赖so库，
可以通过在build.gradle文件中添加jniLibs.srcDirs = [&amp;lsquo;so文件的目录&amp;rsquo;]来导入so库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
	// 其他配置
	sourceSets {
		main {
			//其他配置
			jniLibs.srcDirs = [&#39;libs&#39;]
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;meta-inf中文件重复的问题:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;META-INF中文件重复的问题&lt;/h3&gt;

&lt;p&gt;有些第三方库会在META-INF文件夹中放一些版权说明的文件，如果不止一个库在放了同名的文件，
在打包时gradle就无法决定应META-INF文件夹中应该使用哪个文件。&lt;/p&gt;

&lt;p&gt;这种情况下，可以通过在build.gradle文件中排除这些文件来解决。
版权文件的文件名通常是LICENSE, NOTICE, license.txt, notice.txt之一。
因此可以通过如下配置排除：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
	// 其他配置
	packagingOptions {
		exclude &#39;META-INF/LICENSE&#39;
		exclude &#39;META-INF/NOTICE&#39;
		exclude &#39;META-INF/license.txt&#39;
		exclude &#39;META-INF/notice.txt&#39;
		// 还可添加其他要排除的文件
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该方法也可以用于排除其他不想被打包到APK里的文件。&lt;/p&gt;

&lt;h2 id=&#34;小技巧:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;小技巧&lt;/h2&gt;

&lt;h3 id=&#34;动态设置编译版本号:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;动态设置编译版本号&lt;/h3&gt;

&lt;p&gt;build.gradle文件中可以设置编译出的APK的版本号，如果设置了版本号，则会覆盖Manifest.xml中设置的版本号。&lt;/p&gt;

&lt;p&gt;这样，就给我们提供了一个动态修改编译版本号的方法。如果版本控制使用了SVN，就可以通过编写如下函数来实现动态获取SVN版本号和编译时间：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;
def getVersionCode = {
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine &#39;用于获取版本号的命令&#39;
            standardOutput = code
        }
        return Integer.valueOf(code.toString().split(&amp;quot;\r\n&amp;quot;)[0])
    }
    catch (ignored) {
        return 0;
    }
}
def getVersionName = {
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine &#39;用于获取版本号的命令&#39;
            standardOutput = code
        }
        def date = new ByteArrayOutputStream()
        exec {
            commandLine &#39;用于获取编译时间的命令&#39;
            standardOutput = date
        }
        return code.toString().split(&amp;quot;\r\n&amp;quot;)[0] + &amp;quot;.&amp;quot; + date.toString().split(&amp;quot;\n&amp;quot;)[0]
    }
    catch (ignored) {
        return &amp;quot;&amp;quot;;
    }
}

android {
    updateSVNInfo()
    defaultConfig {
        versionCode getVersionCode()
        versionName getVersionName()
        minSdkVersion 8
        targetSdkVersion 23
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;apk签名配置:f5e1f5a0cf21ff198e5b3684e50f3611&#34;&gt;APK签名配置&lt;/h3&gt;

&lt;p&gt;在Eclipse里debug版本的签名只能使用默认的签名，而在Android Studio中可以通过build.gradle来配置签名所使用的证书：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;android {
	// 其他配置
	signingConfigs {
        debug {
            storeFile file(&amp;quot;签名密钥路径&amp;quot;)
            keyAlias &#39;密钥Alias&#39;
            keyPassword &#39;密钥密码&#39;
            storePassword &#39;存储密码&#39;
        }
		// 可以指定其他编译类型的配置，如release
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置debug和release使用一样的签名就避免了在debug和release混合安装的时候出现签名错误需要重新卸载后再安装的问题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang实现带优先级的channel</title>
      <link>http://rayxxzhang.com/2015/10/29/golang_priority_channel/</link>
      <pubDate>Thu, 29 Oct 2015 15:32:52 +0800</pubDate>
      
      <guid>http://rayxxzhang.com/2015/10/29/golang_priority_channel/</guid>
      <description>&lt;p&gt;一般Go语言同时使用多个&lt;code&gt;channel&lt;/code&gt;的方法是使用&lt;code&gt;select&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;语句配合&lt;code&gt;&amp;lt;-&lt;/code&gt;操作符，比如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;select {
case &amp;lt;- chan1:
	// do something
case &amp;lt;- chan2:
	// do something
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是这种实现方式下&lt;code&gt;chan1&lt;/code&gt;和&lt;code&gt;chan2&lt;/code&gt;是同等优先级的。如果要实现带优先级的&lt;code&gt;channel&lt;/code&gt;则需要用到&lt;code&gt;defalut&lt;/code&gt;语句。&lt;/p&gt;

&lt;p&gt;在go语言中，如果&lt;code&gt;select&lt;/code&gt;/&lt;code&gt;case&lt;/code&gt;中没有&lt;code&gt;default&lt;/code&gt;子句，则程序会阻塞在&lt;code&gt;select&lt;/code&gt;中，直到其中一个&lt;code&gt;case&lt;/code&gt;语句接收到了数据。
如果有&lt;code&gt;default&lt;/code&gt;语句，则不会阻塞，如果&lt;code&gt;case&lt;/code&gt;接收到数据，就执行&lt;code&gt;case&lt;/code&gt;中的语句，如果&lt;code&gt;case&lt;/code&gt;未收到信号，则会执行&lt;code&gt;defalut&lt;/code&gt;中的语句，随后跳出&lt;code&gt;select&lt;/code&gt;块。&lt;/p&gt;

&lt;p&gt;使用这个特性可以实现带优先级的&lt;code&gt;channel&lt;/code&gt;队列。以2个优先级的&lt;code&gt;channel&lt;/code&gt;举例，实现方法是使用多层&lt;code&gt;select&lt;/code&gt;，将高优先级&lt;code&gt;channel&lt;/code&gt;放在最外层&lt;code&gt;select&lt;/code&gt;语句的&lt;code&gt;case&lt;/code&gt;后，并跟上一个&lt;code&gt;default&lt;/code&gt;语句以免当高优先级的&lt;code&gt;channel&lt;/code&gt;没有数据时阻塞。
&lt;code&gt;defalut&lt;/code&gt;内依然是一个&lt;code&gt;select&lt;/code&gt;语句，在这个&lt;code&gt;select&lt;/code&gt;语句中，将高优先级和低优先级的&lt;code&gt;case&lt;/code&gt;都放入，并且没有&lt;code&gt;default&lt;/code&gt;语句。这样内层&lt;code&gt;select&lt;/code&gt;就会阻塞直到其中一个&lt;code&gt;case&lt;/code&gt;收到数据。&lt;/p&gt;

&lt;p&gt;这种实现方式相当于高优先级的&lt;code&gt;channel&lt;/code&gt;比低优先级的多了一次被处理的机会，即外层&lt;code&gt;select&lt;/code&gt;，只有高优先级没有数据时，才会执行内层&lt;code&gt;select&lt;/code&gt;，此时先产生数据的&lt;code&gt;channel&lt;/code&gt;先被执行。&lt;/p&gt;

&lt;p&gt;也就是说，当高优先级和低优先级都有数据时，高优先级先被处理，也就是实现了优先级。示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;for {
	select {
	case data := &amp;lt;- highChan:
		handleHigh(data)
	default:
		select {
		case data := &amp;lt;- highChan:
			handleHigh(data)
		case data := &amp;lt;- lowChan:
			handleLow(data)
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Windows下PyInstaller的使用教程</title>
      <link>http://rayxxzhang.com/2015/09/15/pyinstaller/</link>
      <pubDate>Tue, 15 Sep 2015 20:33:06 +0800</pubDate>
      
      <guid>http://rayxxzhang.com/2015/09/15/pyinstaller/</guid>
      <description>

&lt;p&gt;直接使用Python开发的软件时有许多不方便的地方，如需要安装特定的Python环境，需要安装依赖库。为了便于部署，需要将Python源代码编译成可执行文件，编译后的可执行文件就能脱离python环境运行了。&lt;/p&gt;

&lt;h1 id=&#34;安装:1b70070a7208f70b6a3e9d9aa27f8fdb&#34;&gt;安装&lt;/h1&gt;

&lt;p&gt;将py编译成可执行文件需要使用&lt;a href=&#34;https://github.com/pyinstaller/&#34;&gt;PyInstaller&lt;/a&gt;，需要注意，从百度搜索到的下载链接来自SourceForge，而PyInstaller的开发似乎已经转到Github上去了，因此从SourceForge上下载的版本不是最新的。&lt;/p&gt;

&lt;p&gt;目前最新的PyInstaller版本是2.1，最方便的安装方式是通过&lt;code&gt;pip&lt;/code&gt;使用如下命令安装：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install pyinstall
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当然，也可以通过&lt;a href=&#34;https://github.com/pyinstaller/pyinstaller/releases&#34;&gt;下载&lt;/a&gt;源代码编译方式安装：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成后，使用如下命令可以确认版本号：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pyinstaller --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果显示&lt;code&gt;Error: Python 2.6+ on Windows support need pywin32&lt;/code&gt;，则说明当前没有安装&lt;a href=&#34;http://sourceforge.net/projects/pywin32/files/pywin32/&#34;&gt;pywin32&lt;/a&gt;，安装后即可正常运行PyInstaller。
安装pywin32时需要注意，pywin32的版本和本机Python位数和版本必须相同。&lt;/p&gt;

&lt;h1 id=&#34;简单使用:1b70070a7208f70b6a3e9d9aa27f8fdb&#34;&gt;简单使用&lt;/h1&gt;

&lt;p&gt;最简单的使用方式是运行&lt;code&gt;pyinstaller myscript.py&lt;/code&gt;来生成可执行文件，其中&lt;code&gt;myscript.py&lt;/code&gt;是需要编译成可执行文件的源代码。
通过这种方式生成的可执行文件默认位于当前文件夹的dist目录下的myscript目录中，该目录下除了有exe文件外，还有若干个其他文件，这些文件都是运行时必须的。
编译完成后可以删除build文件夹，该文件夹存放的是编译过程中的生成的临时文件&lt;/p&gt;

&lt;p&gt;如果希望编译出的exe文件不依赖其他文件，可以添加&lt;code&gt;-F&lt;/code&gt;选项：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pyinstaller -F myscript.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;编译出的单独的exe文件在启动时速度上略慢于编译成文件夹方式。因为在执行单独的exe时会将资源先释放到临时文件夹中再执行。&lt;/p&gt;

&lt;h1 id=&#34;常用选项:1b70070a7208f70b6a3e9d9aa27f8fdb&#34;&gt;常用选项&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;distpath=path_to_executable, -o path_to_executable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;指定生成的可执行文件存放的目录，默认存放在dist目录下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;workpath=path_to_work_files&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;指定编译中临时文件存放的目录，默认存放在build目录下&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;clean&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;清理编译时的临时文件&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-F, &amp;ndash;onefile&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;生成单独的exe文件而不是文件夹&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-d, &amp;ndash;debug&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;编译为debug模式，有助于运行中获取日志信息&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ndash;version-file=version_text_file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为exe文件添加版本信息，版本信息可以通过运行&lt;code&gt;pyi-grab_version&lt;/code&gt;加上要获取版本信息的exe文件的路径来生成，生成后的版本信息文件可以按需求修改并作为&lt;code&gt;--version-file&lt;/code&gt;的参数添加到要生成的exe文件中去&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;i &amp;lt;FILE.ico&amp;gt;, -i &amp;lt;FILE.exe,ID&amp;gt;, &amp;ndash;icon=&amp;lt;FILE.ico&amp;gt;, &amp;ndash;icon=&amp;lt;FILE.exe,ID&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为exe文件添加图标，可以指定图标路径或者从已存在的exe文件中抽取特定的ID的图标作为要生成的exe文件的图标&lt;/p&gt;

&lt;p&gt;另外，还可以通过spec文件来生成可执行文件，运行&lt;code&gt;pyi-makespec options script [script ...]&lt;/code&gt;可以生成spec文件，修改spec文件后执行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pyinstaller specfile

或者

pyi-build specfile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以生成可执行文件了。&lt;/p&gt;

&lt;p&gt;spec文件方式生成可执行文件提供了更多的定制选项，包括自定义python库的位置，要打包的其他文件路径等等。&lt;/p&gt;

&lt;h2 id=&#34;更多:1b70070a7208f70b6a3e9d9aa27f8fdb&#34;&gt;更多&lt;/h2&gt;

&lt;p&gt;更多的使用选项及错误解决方法可以参照PyInstaller的&lt;a href=&#34;http://pythonhosted.org/PyInstaller/&#34;&gt;官方帮助文档&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Hugo搭建博客</title>
      <link>http://rayxxzhang.com/2015/09/14/first/</link>
      <pubDate>Mon, 14 Sep 2015 18:57:07 +0800</pubDate>
      
      <guid>http://rayxxzhang.com/2015/09/14/first/</guid>
      <description>&lt;p&gt;终于下决心开个博客，之前试过一次，但是太懒，基本没写什么，而且懒得维护服务器。所以这次博客选择用静态页面的方法搭建，静态博客的好处是能专注于内容本身而不是服务器的维护工作。&lt;/p&gt;

&lt;p&gt;假期花了两天时间完成了建立博客的前期准备工作，在此分享一下其中的心得体会：&lt;/p&gt;

&lt;p&gt;博客的托管方面选择的是 &lt;em&gt;Github Pages&lt;/em&gt; ， &lt;em&gt;Github Pages&lt;/em&gt; 可以存放静态的网页，通常被用于架设开源项目的主页以及个人技术博客。
搭建博客以及选择托管在Github上的主要是因为曾经听一个互联网创业公司的创始人说过，写博客是一种很好的习惯，可以记录下自己所学过的知识。这对未来的求职和工作都有帮助。
而Github作为目前最大的开源社区，是技术交流的绝佳平台，相比于国内使用较多的CSDN博客及博客园，Github博客以Github的个人主页更能体现出一个人完整的技术水平。&lt;/p&gt;

&lt;p&gt;关于 &lt;em&gt;Github Pages&lt;/em&gt; 的使用，官方有详细的&lt;a href=&#34;https://help.github.com/categories/github-pages-basics/&#34;&gt;教程&lt;/a&gt;。
官方推荐的架设博客的方式是使用&lt;a href=&#34;https://github.com/jekyll/jekyll&#34;&gt;Jekyll&lt;/a&gt;，不过在看了网上一些对静态博客搭建软件的比较后（&lt;a href=&#34;http://www.zhihu.com/question/20962496&#34;&gt;如何在 GitHub 上写博客？&lt;/a&gt;），最终决定使用Hugo作为搭建博客的工具。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;使用Golang开发，windows版本就一个exe文件，使用方便，并且Github上有许多Hugo的UI主体可供使用。&lt;/p&gt;

&lt;p&gt;在学习使用Hugo的过程中，参考了&lt;a href=&#34;http://blog.coderzh.com/2015/08/29/hugo/&#34;&gt;使用hugo搭建个人博客站点&lt;/a&gt;这篇博文。作者比较详细的说明了如何使用Hugo搭建一个静态博客。
在这里就不详细叙述了，有兴趣可以参考该博文。&lt;/p&gt;

&lt;p&gt;Hugo和Jekyll等软件一样也选择了markdown作为博文的写作格式，这点让我比较喜欢，markdown的写作能在生成比较优雅的外观的同时兼顾源文件的简洁，非常适合技术文章的使用。
尝试了一下Hugo对markdown特性的支持，对标准markdown的支持很好，并且还支持部分&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;Github flavored markdown&lt;/a&gt;的特性。在此也归纳一下Github官方的markdown教程以便日后查询：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/markdown-basics/&#34;&gt;Markdown basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;Mastering markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;Github flavored markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在Hugo主题选择方面，一个名为&lt;a href=&#34;https://github.com/pdevty/polymer&#34;&gt;Polymer&lt;/a&gt;的主题让我眼前一亮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://github.com/pdevty/polymer/blob/master/images/tn.png?raw=true&#34; alt=&#34;Hugo的Polymer主题&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从Polymer这个名字一眼就可以看出是来自Google的&lt;a href=&#34;https://www.polymer-project.org/1.0/&#34;&gt;Polymer项目&lt;/a&gt;。
作为这两年在Google I/O大会上提及的前端开发框架，它使用了许多新的技术，如web components，shadow DOM等等，把html的一些基础组件封装成了一些十分方便使用的控件，样式优雅开发简单。
仔细看了一下Hugo的Polymer主题的外观以及逻辑，觉得还是有一些小问题需要改进的，比较明显的就是文章页导航按钮和底栏出现了错位。因此，我决定学习一下Google Polymer的使用方法并且把主题中的这些小错误改过来。&lt;/p&gt;

&lt;p&gt;通过对Google Polymer文档的学习以及Polymer主题源码的阅读和调试，找到发生错位的原因是 &lt;code&gt;layouts/partials/content.html&lt;/code&gt; 文件中未将文章正文部分用 &lt;code&gt;&amp;lt;paper-item&amp;gt;&lt;/code&gt; 标签包裹，而导航栏及底栏都使用了 &lt;code&gt;&amp;lt;paper-item&amp;gt;&lt;/code&gt; 标签，
因此导致了html的解析问题，使得正文部分的高度被忽略，所以原本应该显示在底部的底栏发生了显示上的错位。&lt;/p&gt;

&lt;p&gt;除此之外，还在主题上加入了各大网站个人主页链接的自定义排序功能，并且加上的新浪微博的图标。修改了 &lt;strong&gt;标签&lt;/strong&gt; ， &lt;strong&gt;主题&lt;/strong&gt; 两个页面，添加了自定义预设文本的选项，修改了字体大小等细节。
由于修改基于从原项目folk出的新项目上，因此所有的修改都可以在&lt;a href=&#34;https://github.com/123hurray/polymer/&#34;&gt;github.com/123hurray/polymer&lt;/a&gt;的提交记录看到。&lt;/p&gt;

&lt;p&gt;以上工作完成后，基本的准备工作就算结束了。随着这篇博文的发布，博客就算正式建立了。近期的博客发布计划主要是在Android开发中的一些心得及备忘，&lt;a href=&#34;https://poj.org/&#34;&gt;POJ&lt;/a&gt;题目的解题心得等等。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>